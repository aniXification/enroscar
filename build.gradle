buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.5.+'
    classpath 'com.squareup.gradle:gradle-android-test-plugin:0.9.+'
  }
}

def getPackageName = { "com.stanfy.enroscar.${it.name.replaceAll(/\W/, '').replaceAll(/enroscar/, '')}" }
def projectVersion = "1.0-SNAPSHOT"

task wrapper(type: Wrapper) {
  gradleVersion = '1.7'
}


def checkstyleDir = new File(rootDir, 'config/checkstyle')
def checkstyleConfig = new File(checkstyleDir, 'checkstyle.xml')

boolean hasCredentials = hasProperty('nexusUsername') && hasProperty('nexusPassword')

subprojects {

  // XXX change me
  def checkDir = "$project.projectDir"
  if (checkDir.contains("/integration") && !checkDir.endsWith("sherlock-integration")) {
    return
  }

  apply plugin : 'android-library'
  apply plugin : 'checkstyle'
  apply plugin : 'maven'
  apply plugin : 'signing'
//  apply plugin: 'stanfy-repo'

  version = projectVersion
  group = 'com.stanfy.enroscar'

  checkstyle {
    configFile = checkstyleConfig
    configProperties['basedir'] = project.projectDir
  }

  repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }

  signing {
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        def repoUrl = (
            projectVersion.contains("SNAPSHOT")
                ? "https://oss.sonatype.org/content/repositories/snapshots/"
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        )
        repository(url: repoUrl) {
          if (hasCredentials) {
            authentication(userName: nexusUsername, password: nexusPassword)
          }
        }

        pom.project {
          name 'Enroscar'
          description 'Android Library'
          url 'https://github.com/stanfy/enroscar'
          inceptionYear '2011'

          scm {
            url 'https://github.com/stanfy/enroscar'
            connection 'scm:git:git@github.com:stanfy/enroscar.git'
            developerConnection 'scm:git:git@github.com:stanfy/enroscar.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'rmazur'
              name 'Roman Mazur'
              email 'rmazur@stanfy.com.ua'
            }
          }
        }

      }
    }
  }


  android {
    compileSdkVersion 17

    buildToolsVersion '17'

    defaultConfig {
      versionCode 9
      versionName projectVersion
      minSdkVersion 8
      targetSdkVersion 17
      packageName getPackageName(project)
    }
  }

  configurations {
    jvmTest.extendsFrom compile /* tests on JVM */
  }

  task classesJar(type : Copy, dependsOn : 'packageReleaseJar') {
    from 'build/bundles/release/classes.jar'
    into "build/libs"
    rename { "${project.name}-${project.version}.jar" }
  }

  sourceSets {
    jvmTest {
      compileClasspath += configurations.jvmTest
      runtimeClasspath += output + compileClasspath
    }
  }

  task testJvm(type: Test)

  def testSelectionConfig = {
    testClassesDir = project.sourceSets.jvmTest.output.classesDir
    classpath = project.sourceSets.jvmTest.runtimeClasspath

    ignoreFailures = true
    scanForTestClasses = false

    def selection = null
    try {
      selection = project.testSelection
    } catch (def e) {
      // ignore
    }
    if (!selection) {
      selection = "**/*Test.class"
    }

    include selection
    exclude "**/Abstract*.class"
  }

  testJvm(testSelectionConfig)

  task debugTestJvm(type : Test)
  debugTestJvm.doFirst {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
  debugTestJvm(testSelectionConfig)
  //debugTestJvm.dependsOn 'cleanTest'

  task sourcesJar(type: Jar) {
    from 'src/main/java'
    classifier = 'sources'
  }

  task jvmTestsJar(type : Jar) {
    from 'src/jvmTest/java'
    classifier = 'tests'
  }

  artifacts {
    // add sources to published artifacts
    archives sourcesJar

    jvmTest file("$buildDir/libs/${project.name}-${project.version}.jar")
    jvmTest jvmTestsJar
  }

  assemble.dependsOn classesJar
  check.dependsOn testJvm

  dependencies {
    jvmTest group: 'org.robolectric', name: 'robolectric', version: '2.1.1'
    jvmTest files("$System.env.ANDROID_HOME/platforms/android-17/android.jar")

    jvmTest group: 'junit', name: 'junit', version: '4.11'
    jvmTest 'org.easytesting:fest-assert-core:2.0M10'
    jvmTest 'com.squareup:fest-android:1.0.7'

    // use main sources
    // TODO can it be made with source sets?
    jvmTest files("$buildDir/classes/debug") {
      builtBy 'compileDebug'
    }
  }

  project.ext.dependOnProjects = { list ->
    return {
      list.each {
        compile project(it)
        jvmTest project(path : it, configuration : 'jvmTest')
      }
    }
  }

}
